# Schedule builds trigger the base image build step.
schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build for base image
    branches:
      include:
        - main

parameters:
  - name: buildBaseImage
    displayName: Build Docker Base Image
    type: boolean
    default: false
  - name: containerRegistryServiceConnection
    displayName: Container Registry Service Connection
    type: string
    default: SC-IHRBENCHMARK-P-ACR
  - name: azureSubscription
    displayName: Azure Resource Manager Service Connection Name
    type: string
    default: SC-IHRBENCHMARK-P-WEU-RG01
    values:
      - SC-IHRBENCHMARK-P-WEU-RG01
      - SC-IHRBENCHMARK-T-WEU-RG01

# TODO: Parameterize these in the variable group
variables:
  - group: pipeline-variable-group
  - name: DOCKER_BUILDKIT
    value: 1
  - name: tag
    value: $(build.buildId)
  - name: appName
    value: benchmarks
  - name: containerRegistry
    value: ${{parameters.containerRegistryServiceConnection}}
  - name: containerRegistryDomain
    value: ihrbenchmarkwhoproduction.azurecr.io
  - name: azureSubscription
    value: ${{parameters.azureSubscription}}
  - name: webAppName
    value: whoproduction-ihrbenchmark-app-service
  - name: resourceGroupName
    value: IHRBENCHMARK-P-WEU-RG01
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: buildBaseImage
    value: ${{ parameters.buildBaseImage }}
  - name: DATABASE_URL
    value: postgres://postgres:postgresPassword@localhost:5432/benchmarks_test

resources:
  containers:
    - container: postgres
      image: postgres:14-alpine
      env:
        POSTGRES_DB: benchmarks_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgresPassword
      ports:
        - "5432:5432"

stages:
  - stage: Test
    jobs:
      - job: Test
        displayName: Run CI Tests
        condition: ne(variables['Build.Reason'], 'Schedule')
        pool:
          # ubuntu-20.04 image includes most of what we need, cutting down on installs
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
          vmImage: "ubuntu-20.04"
        services:
          postgres: postgres
        steps:
          - script: printenv
            displayName: printenv
          - task: UseRubyVersion@0
            inputs:
              versionSpec: ">= 3.0"
              addToPath: true
          - task: NodeTool@0
            inputs:
              versionSpec: "16.x"
          - script: |
              bin/bundle config set --local path vendor/bundle && \
              bin/bundle config set --local deployment true && \
              bin/bundle install
            displayName: bundle install
          - script: yarn install --frozen-lockfile --check-files
            displayName: yarn install
          - task: CmdLine@2
            displayName: prepare test db
            env:
              RAILS_ENV: test
            inputs:
              script: bin/bundle exec rake db:schema:load db:seed
          - task: CmdLine@2
            displayName: rake test:ci
            env:
              MINITEST_REPORTER: JUnitReporter
            inputs:
              script: bin/bundle exec rake test:ci
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: JUnit
              testRunTitle: Benchmarks ruby rspec test suite with in-browser
              testResultsFiles: "**/TEST-*.xml"

  - stage: Build
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    displayName: Build and Push
    jobs:
      - job: BuildBase
        displayName: Build Base Image
        # Build the base image when the trigger reason was a scheduled build
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'Schedule'), eq(variables.buildBaseImage, 'true')))
        steps:
          - task: Docker@2
            displayName: Build and Push base image
            inputs:
              command: buildAndPush
              containerRegistry: $(containerRegistry)
              repository: benchmarks_builder
              buildContext: $(Build.Repository.LocalPath)
              Dockerfile: config/docker/builder/Dockerfile
              tags: latest
              arguments: "--no-cache"
      - job: Build
        displayName: Build Docker Image
        dependsOn: BuildBase
        condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))
        steps:
          - script: echo $(RAILS_MASTER_KEY) > config/master.key
            displayName: Write RAILS_MASTER_KEY to file config/master.key
          - task: Docker@2
            displayName: Docker build image
            inputs:
              command: build
              containerRegistry: $(containerRegistry)
              repository: $(appName)
              buildContext: $(Build.Repository.LocalPath)
              Dockerfile: config/docker/Dockerfile
              tags: |
                $(tag)
                latest
              arguments: "--secret id=RAILS_MASTER_KEY,src=config/master.key --no-cache"
          - script: rm config/master.key
            displayName: Delete RAILS_MASTER_KEY file config/master.key
      - job: Push
        dependsOn: Build
        displayName: Push to Container Registry
        steps:
          - task: Docker@2
            displayName: Docker push image to ACR
            inputs:
              command: push
              containerRegistry: $(containerRegistry)
              repository: $(appName)
              tags: |
                $(tag)
                latest
  - stage: Staging
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))
    jobs:
      - job: Deploy
        displayName: Deploy to Staging
        steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              imageName: $(containerRegistryDomain)/$(appName):$(tag)
              deployToSlotOrASE: true
              ResourceGroupName: $(resourceGroupName)
              slotName: staging
  - stage: Production
    dependsOn: Staging
    condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))
    jobs:
      - job: Promote
        displayName: Promote to production
        steps:
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: $(azureSubscription)
              WebAppName: $(webAppName)
              ResourceGroupName: $(resourceGroupName)
              SourceSlot: staging
              SwapWithProduction: true
