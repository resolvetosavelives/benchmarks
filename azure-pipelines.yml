# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - build-pipeline-installs-postgres-as-a-workaround--179445541

variables:
  AzureSubscription: pend-db01
#  DatabaseName: benchmarks_test
#  DbUser: 83edada839
#  DbPassword: d24e1f8180
#  DbUrl: postgres://'$(DbUser)':'$(DbPassword)'@localhost:5432/'$(DatabaseName)'
  DbUrl: postgres://fyxzCNQUqNrd%40psqldb-who-ihr-benchmarks:Lo4YdiJcggrN9TfPagCW2AsMtFbQ8R6N@psqldb-who-ihr-benchmarks.privatelink.postgres.database.azure.com:5432/benchmarks_staging?sslmode=require

#resources:
#  containers:
#    - container: ubuntu_postgres
#      image: ubuntu/postgres
#      type: docker
#      options: -e POSTGRES_USER='$(DbUser)' -e POSTGRES_PASSWORD='$(DbPassword)' -e POSTGRES_DB='$(DatabaseName)' -p 5432:5432

# the MS-provided ubuntu-20.04 image includes postgres
# full list of includes software:
# https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
pool:
  vmImage: ubuntu-20.04
#  options: -e POSTGRES_USER='$(DbUser)' -e POSTGRES_PASSWORD='$(DbPassword)' -e POSTGRES_DB='$(DatabaseName)' -p 5432:5432

steps:
  - script: env | sort
    displayName: show env vars
  - task: UseRubyVersion@0
    inputs:
      versionSpec: ">= 3.0"
      addToPath: true
  - task: NodeTool@0
    inputs:
      versionSpec: "16.x"
  - script: bundle install --deployment --path vendor/bundle
    displayName: bundle install
  - script: yarn install --frozen-lockfile --check-files
    displayName: yarn install
  - task: CmdLine@2
    displayName: prepare test db
    inputs:
      script: DATABASE_URL='$(DbUrl)' RAILS_ENV=test bin/bundle exec rake db:schema:load db:seed
      azureSubscription: '$(AzureSubscription)' # to make it use the service connection to our private DB
  - task: CmdLine@2
    displayName: run test suite
    inputs:
      script: DATABASE_URL='$(DbUrl)' MINITEST_REPORTER=JUnitReporter bin/bundle exec rake test:all
      azureSubscription: '$(AzureSubscription)' # to make it use the service connection to our private DB
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: JUnit
      testRunTitle: Benchmarks ruby rspec test suite with in-browser
      testResultsFiles: "**/TEST-*.xml"
