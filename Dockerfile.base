# Dockerfile-base
FROM ruby:alpine

# RUN apk add build-base postgresql-dev git nodejs yarn tzdata file
RUN apk add build-base postgresql-dev nodejs-current yarn

WORKDIR /app
# Install base app gems/packages into the base image
COPY Gemfile* .ruby-version package.json yarn.lock /app/

# TODO: use the modern version
RUN bundle config without 'development test' 
RUN bundle install --deployment --path /app/vendor/bundle

ONBUILD COPY package.json yarn.lock /app/
RUN yarn install --frozen-lockfile

# In builds using this as a base, install new gems and remove obsolete gems
ONBUILD COPY Gemfile* .ruby-version /app/
ONBUILD RUN bundle install --clean


# After updating gems for the child image, copy in the latest app code
ONBUILD COPY . /app

ONBUILD RUN RAILS_ENV=production \
    SECRET_KEY_BASE=melonmelonmelonmelonmelonmelonmelon \
    ASSET_COMPILATION=true \
    bundle exec rails assets:precompile


#TODO: Cleanup
# ONBUILD RUN bundle clean --force && \
#     # Remove unneeded files from installed gems (cached *.gem, *.o, *.c)
#     rm -rf /usr/local/bundle/cache/*.gem && \
#     find /usr/local/bundle/gems/ -name "*.c" -delete && \
#     find /usr/local/bundle/gems/ -name "*.o" -delete

# Remove unnecessary packages
ONBUILD RUN apk del build-base postgresql-dev yarn nodejs

# Remove folders not needed in resulting image
ONBUILD RUN rm -rf node_modules tmp/cache vendor/bundle test spec
